
@compiler >= 6

include "String.aes"

contract Paydii =

    record state =
        { index         : int
        , products  : map(string, product)
        , products_by_seller: map(address, list(string)) } 

    record product = {
        id: string,
        number_no: int,
        name: string,
        price: int,
        description: string,
        img: string,
        is_active: bool,
        seller: address
        }

    stateful entrypoint init() = 
        {   products = {},
            products_by_seller = {},
            index = 1 }
    
    public stateful entrypoint create_product(id: string, name: string, price: int, description: string, img: string, is_active: bool) : string = 
        require( (Map.lookup(id,state.products) == None) , "Product's id is exist")
        let new_product : product = {
            id = id,
            name = name,
            price = price,
            number_no = state.index,
            seller = Call.caller,
            description = description,
            img = img,
            is_active = is_active
            }
        // add product
        put(state{products[id] = new_product})
        put(state{index = (state.index + 1)})

        // add product by seller 
        if (Map.lookup(Call.caller,state.products_by_seller) == None)
            put(state{products_by_seller[Call.caller] = [id] })
        else 
            let current_product = state.products_by_seller[Call.caller]
            let new_list = List.insert_at(List.length(current_product) - 1,id,current_product)
            put(state{products_by_seller[Call.caller] = new_list })        
        new_product.id

    public stateful entrypoint update_product(id: string, name: string, price: int, description: string, img: string, is_active: bool) : string = 
        let current_product = state.products[id] 
        require(( Map.lookup(id,state.products) != None) , "Product with this id is not exist")
        require ( current_product.seller == Call.caller, "You are not the product's owner" )
        let updated_product : product = {
            id = id,
            name = name,
            price = price,
            number_no = current_product.number_no,
            seller = current_product.seller,
            description = description,
            img = img,
            is_active = is_active
            }
        put(state{products[id] = updated_product})
        state.products[id].id
    
    entrypoint get_seller_products(seller: address) : list(string) =  
        if (Map.lookup(seller,state.products_by_seller) == None)
            []
        else 
            state.products_by_seller[seller]


    entrypoint get_product(id: string) : product =
        require(product_exists(id), "There is no product with this id")
        let return_product : product = state.products[id]
        return_product
    entrypoint product_exists(id: string) : bool =
        Map.member(id, state.products)

